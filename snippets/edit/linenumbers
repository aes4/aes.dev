;globalvars
    const linenumbersx = <%- linenumbersx %>;
;swap vd
    function vd(i, p) {  // visual display
        t((i+1).toString(),
        linenumbersx - (charspacing * ((i+1).toString().length)),
        (p * (charvrange + linespacing)) + (textborder + textbordery));
        for (let ii = 0; ii < g.content[i].length; ii++) {
            t(g.content[i][ii],
            (ii * charspacing) + (textborder + textborderx) + linenumbersx,
            (p * (charvrange + linespacing)) + (textborder + textbordery));
        }
    }
;swap dd
    function dd(i, p) {  // default display
        t((i+1).toString(),
        linenumbersx - (charspacing * ((i+1).toString().length)),
        (p * (charvrange + linespacing)) + (textborder + textbordery));
        //^ p or i
        for (let ii = 0; ii <= g.content[i].length; ii++) {
            if (ii < g.content[i].length) {
                t(g.content[i][ii],
                (ii * charspacing) + (textborder + textborderx) + linenumbersx,
                (p * (charvrange + linespacing)) + (textborder + textbordery));
                if (g.placement.x - 1 == ii && g.placement.y - 1 == i) {
                    let x = (ii * charspacing) + (textborder + textborderx) + linenumbersx;
                    let y = (p * (charvrange + linespacing)) + (textborder + textbordery);
                    line(x, y, x + cursorlength, y);
                    line(x, y, x, y + cursorlength);
                    line(x + charspacing, y, x + charspacing - cursorlength, y);
                    line(x + charspacing, y, x + charspacing, y + cursorlength);
                    line(x, y + charvrange, x + cursorlength, y + charvrange);
                    line(x, y + charvrange, x, y + charvrange - cursorlength);
                    line(x + charspacing, y + charvrange, x + charspacing - cursorlength, y + charvrange);
                    line(x + charspacing, y + charvrange, x + charspacing, y + charvrange - cursorlength);
                }
            } else {  // same as ii == g.content[i].length
                if (g.placement.x - 1 == ii && g.placement.y - 1 == i) {
                    let x = (ii * charspacing) + (textborder + textborderx) + linenumbersx;
                    let y = (p * (charvrange + linespacing)) + (textborder + textbordery);
                    line(x + cursorlength, y, x, y + cursorlength);
                    line(x + charspacing - cursorlength, y, x + charspacing, y + cursorlength);
                    line(x + cursorlength, y + charvrange, x, y + charvrange - cursorlength);
                    line(x + charspacing - cursorlength, y + charvrange, x + charspacing, y + charvrange - cursorlength);
                }
                if (g.content[i][ii - 1] == " ") {
                    let x = ((ii - 1) * charspacing) + (textborder + textborderx) + linenumbersx;
                    let y = (p * (charvrange + linespacing)) + (textborder + textbordery);
                    line(x + charspacing, y + charvrange, x + charspacing - cursorlength, y + charvrange);
                    line(x + charspacing, y + charvrange, x + charspacing, y + charvrange - cursorlength);
                }
            }
        }
    }
;swap vsd
    function vsd(i, p) {  // visual splacements display
        for (let ii = 1; ii <= g.content[i - 1].length + 1; ii++) {
            // go past the line with 'newline' in splacements?
            for (let q = 0; q < g.splacements.length; q++) {
                if (g.splacements[q].y == i && g.splacements[q].x == ii) {
                    let x = ((ii - 1) * charspacing) + (textborder + textborderx) + linenumbersx;
                    let y = ((p - 1) * (charvrange + linespacing)) + (textborder + textbordery);
                    line(x, y, x + cursorlength, y);
                    line(x, y, x, y + cursorlength);
                    line(x + charspacing, y, x + charspacing - cursorlength, y);
                    line(x + charspacing, y, x + charspacing, y + cursorlength);
                    line(x, y + charvrange, x + cursorlength, y + charvrange);
                    line(x, y + charvrange, x, y + charvrange - cursorlength);
                    line(x + charspacing, y + charvrange, x + charspacing - cursorlength, y + charvrange);
                    line(x + charspacing, y + charvrange, x + charspacing, y + charvrange - cursorlength);
                }
            }
        }
    }
;swap main
    function main() {
        switch (g.mode) {
            case 'visual':
                p = 0;
                if (slack < g.placement.y && g.placement.y < g.content.length - slack) {
                    for (let i = g.placement.y - slack; i < (g.placement.y + lines) - slack; i++) {
                        if (i < g.content.length) {
                            vd(i - 1, p);
                            vsd(i, p + 1);
                        }
                        p++;
                    }
                }
                if (slack >= g.placement.y) {
                    for (let i = 0; i < lines; i++) {
                        if (i < g.content.length) {
                            vd(i, p);
                            vsd(i + 1, p + 1);
                            p++;
                        }
                    }
                }
                if (g.placement.y >= g.content.length - slack && !(slack >= g.placement.y)) {
                    for (let i = g.content.length - lines; i <= g.content.length; i++) {
                        if (i < g.content.length) {
                            vd(i, p);
                            vsd(i + 1, p + 1);
                        }
                        p++;
                    }
                }
                break
            default:
                p = 0;
                if (slack < g.placement.y && g.placement.y < g.content.length - slack) {
                    for (let i = g.placement.y - slack; i < (g.placement.y + lines) - slack; i++) {
                        if (i < g.content.length) {
                            dd(i - 1, p);
                        }
                        p++;
                    }
                }
                if (slack >= g.placement.y) {
                    for (let i = 0; i < lines; i++) {
                        if (i < g.content.length) {
                            dd(i, p);
                            p++;
                        }
                    }
                }
                if (g.placement.y >= g.content.length - slack && !(slack >= g.placement.y)) {
                    for (let i = g.content.length - lines; i <= g.content.length; i++) {
                        if (i < g.content.length && i >= 0) {  // remove && by fixing g.content.length - slack?
                            dd(i, p);
                            p++;
                        }
                        // p++;
                    }
                }
                if (g.cll() == 0) {
                    let x = (0 * charspacing) + (textborder + textborderx) + linenumbersx;
                    let y = ((g.placement.y - 1) * (charvrange + linespacing)) + (textborder + textbordery);
                    line(x + cursorlength, y, x, y + cursorlength);
                    line(x + charspacing - cursorlength, y, x + charspacing, y + cursorlength);
                    line(x + cursorlength, y + charvrange, x, y + charvrange - cursorlength);
                    line(x + charspacing - cursorlength, y + charvrange, x + charspacing, y + charvrange - cursorlength);
                }
        }
    }
