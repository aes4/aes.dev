;globalvars
    let cl = '';
    let cltoggle = false;
    let lastmode;
    let fileHandle;
;function
    function arrtostr(arr) {
        let str = '';
        //for (let i = 0; i < arr.length - 1; i++) {
        for (let i = 0; i < arr.length; i++) {
            str += arr[i].join('') + '\n';
        }
        //str += arr[arr.length - 1].join('');
        return str;
    }
;listener
    window.addEventListener('keydown', clkd);
    async function clkd(event) {
        if (cltoggle) {
            switch (event.key) {
                case 'Enter':
                    let c = cl.slice(1);
                    // check if new file?
                    if (c[0] == 'l' || c[0] == 'w') {
                        if (c[0] == 'l') {
                            [fileHandle] = await window.showOpenFilePicker();
                            let localfile = await fileHandle.getFile();
                            let temp = await localfile.text();
                            g.content = strtoarr(temp);
                        }
                        if (c[0] == 'w') {
                            let save = await fileHandle.createWritable();  // Y NO E?
                            await save.write(arrtostr(g.content));
                            await save.close();
                        }
                    } else {
                        if (c[0] == 's') {
                            let temp = c.split(' ');
                            if (temp.length > 1) {
                                g.filename = temp[1];
                                if (temp.length > 2) {
                                    g.type = temp[2];
                                }
                            } else {
                                c += ' default';
                            }
                        }
                        fetch("post", {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 'c': c,
                                'r': reload,
                                'f': g.filename,
                                't': g.type,
                                'g': arrtostr(g.content)
                            })
                        })
                        .then(res => res.text())
                        .then(data => {
                            let base = document.getElementById("base");
                            let source = document.getElementById("source");
                            let pls = document.createRange().createContextualFragment(data);
                            document.body.appendChild(pls);
                            document.body.removeChild(base);
                            window.removeEventListener('keydown', clkd);
                            window.removeEventListener('keydown', tekd);
                            document.body.removeChild(source);
                        });
                    }
                    cl = '';
                    cltoggle = false;
                    g.mode = lastmode;
                    break
                case 'Escape':
                    cl = '';
                    cltoggle = false;
                    g.mode = lastmode;
                    break
                case 'Tab':
                    event.preventDefault();
                    // add ability to tab in cl?
                    break
                case 'Backspace':
                    cl = cl.slice(0, -1);
                    break
                case 'Shift':
                    break
                case 'CapsLock':
                    break
                case 'Control':
                    break
                case 'Meta':
                    break
                case 'Alt':
                    break
                default:
                    cl += event.key
            }
        } else if (event.key == ';') {
            cl += ';';
            cltoggle = true;
            lastmode = g.mode;
            g.mode = 'cl';
            g.buffer = [];
        }
    }
;mainfunctions
    function main() {
        t(cl, 20, canvas.height - 16, "bottom");
    }
;frame
    main();
